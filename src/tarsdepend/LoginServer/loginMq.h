// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.4.13.
// **********************************************************************

#ifndef __LOGINMQ_H_
#define __LOGINMQ_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;


namespace loginMqTars
{
    struct UserLoginMsg : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "loginMqTars.UserLoginMsg";
        }
        static string MD5()
        {
            return "b725a7a95c3ce978660a88e124e942ef";
        }
        UserLoginMsg()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            uid = 0;
            gate = "";
            cid = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(uid, 0);
            _os.write(gate, 1);
            _os.write(cid, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uid, 0, true);
            _is.read(gate, 1, true);
            _is.read(cid, 2, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["uid"] = tars::JsonOutput::writeJson(uid);
            p->value["gate"] = tars::JsonOutput::writeJson(gate);
            p->value["cid"] = tars::JsonOutput::writeJson(cid);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(uid,pObj->value["uid"], true);
            tars::JsonInput::readJson(gate,pObj->value["gate"], true);
            tars::JsonInput::readJson(cid,pObj->value["cid"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(uid,"uid");
            _ds.display(gate,"gate");
            _ds.display(cid,"cid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(gate, true);
            _ds.displaySimple(cid, false);
            return _os;
        }
    public:
        tars::Int64 uid;
        std::string gate;
        tars::Int64 cid;
    };
    inline bool operator==(const UserLoginMsg&l, const UserLoginMsg&r)
    {
        return l.uid == r.uid && l.gate == r.gate && l.cid == r.cid;
    }
    inline bool operator!=(const UserLoginMsg&l, const UserLoginMsg&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const UserLoginMsg&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,UserLoginMsg&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


}



#endif
