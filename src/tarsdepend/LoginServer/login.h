// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.4.13.
// **********************************************************************

#ifndef __LOGIN_H_
#define __LOGIN_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace loginTars
{
    struct LoginReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "loginTars.LoginReq";
        }
        static string MD5()
        {
            return "0a7cf4b297857ff010735acf597f0853";
        }
        LoginReq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            uid = 0;
            type = 0;
            token = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(uid, 0);
            _os.write(type, 1);
            _os.write(token, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uid, 0, true);
            _is.read(type, 1, true);
            _is.read(token, 2, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["uid"] = tars::JsonOutput::writeJson(uid);
            p->value["type"] = tars::JsonOutput::writeJson(type);
            p->value["token"] = tars::JsonOutput::writeJson(token);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(uid,pObj->value["uid"], true);
            tars::JsonInput::readJson(type,pObj->value["type"], true);
            tars::JsonInput::readJson(token,pObj->value["token"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(uid,"uid");
            _ds.display(type,"type");
            _ds.display(token,"token");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(token, false);
            return _os;
        }
    public:
        tars::Int64 uid;
        tars::Int32 type;
        std::string token;
    };
    inline bool operator==(const LoginReq&l, const LoginReq&r)
    {
        return l.uid == r.uid && l.type == r.type && l.token == r.token;
    }
    inline bool operator!=(const LoginReq&l, const LoginReq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const LoginReq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,LoginReq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct LoginRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "loginTars.LoginRsp";
        }
        static string MD5()
        {
            return "b84e4dd5dd1d7c43dbe702512024405f";
        }
        LoginRsp()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            code = 0;
            reason = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(code, 0);
            _os.write(reason, 1);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(code, 0, true);
            _is.read(reason, 1, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["code"] = tars::JsonOutput::writeJson(code);
            p->value["reason"] = tars::JsonOutput::writeJson(reason);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(code,pObj->value["code"], true);
            tars::JsonInput::readJson(reason,pObj->value["reason"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(code,"code");
            _ds.display(reason,"reason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(code, true);
            _ds.displaySimple(reason, false);
            return _os;
        }
    public:
        tars::Int32 code;
        std::string reason;
    };
    inline bool operator==(const LoginRsp&l, const LoginRsp&r)
    {
        return l.code == r.code && l.reason == r.reason;
    }
    inline bool operator!=(const LoginRsp&l, const LoginRsp&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const LoginRsp&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,LoginRsp&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class LoginIFPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~LoginIFPrxCallback(){}
        virtual void callback_Login(const loginTars::LoginRsp& ret)
        { throw std::runtime_error("callback_Login() override incorrect."); }
        virtual void callback_Login_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_Login_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __LoginIF_all[]=
            {
                "Login"
            };
            pair<string*, string*> r = equal_range(__LoginIF_all, __LoginIF_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __LoginIF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_Login_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    loginTars::LoginRsp _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_Login(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<LoginIFPrxCallback> LoginIFPrxCallbackPtr;

    /* callback of coroutine async proxy for client */
    class LoginIFCoroPrxCallback: public LoginIFPrxCallback
    {
    public:
        virtual ~LoginIFCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __LoginIF_all[]=
            {
                "Login"
            };

            pair<string*, string*> r = equal_range(__LoginIF_all, __LoginIF_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __LoginIF_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_Login_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        loginTars::LoginRsp _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response->context);

                        callback_Login(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_Login_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_Login_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<LoginIFCoroPrxCallback> LoginIFCoroPrxCallbackPtr;

    /* proxy for client */
    class LoginIFProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        loginTars::LoginRsp Login(const loginTars::LoginReq & req,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"Login", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            loginTars::LoginRsp _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_Login(LoginIFPrxCallbackPtr callback,const loginTars::LoginReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"Login", _os, context, _mStatus, callback);
        }
        
        void coro_Login(LoginIFCoroPrxCallbackPtr callback,const loginTars::LoginReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"Login", _os, context, _mStatus, callback, true);
        }

        LoginIFProxy* tars_hash(int64_t key)
        {
            return (LoginIFProxy*)ServantProxy::tars_hash(key);
        }

        LoginIFProxy* tars_consistent_hash(int64_t key)
        {
            return (LoginIFProxy*)ServantProxy::tars_consistent_hash(key);
        }

        LoginIFProxy* tars_set_timeout(int msecond)
        {
            return (LoginIFProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "LoginIFProxy"; }
    };
    typedef tars::TC_AutoPtr<LoginIFProxy> LoginIFPrx;

    /* servant for server */
    class LoginIF : public tars::Servant
    {
    public:
        virtual ~LoginIF(){}
        virtual loginTars::LoginRsp Login(const loginTars::LoginReq & req,tars::TarsCurrentPtr current) = 0;
        static void async_response_Login(tars::TarsCurrentPtr current, const loginTars::LoginRsp &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __loginTars__LoginIF_all[]=
            {
                "Login"
            };

            pair<string*, string*> r = equal_range(__loginTars__LoginIF_all, __loginTars__LoginIF_all+1, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __loginTars__LoginIF_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    loginTars::LoginReq req;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(req, _jsonPtr->value["req"], true);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                    }
                    loginTars::LoginRsp _ret = Login(req, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("tars_ret", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
